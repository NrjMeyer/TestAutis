/* Eric Meyer's CSS Reset
   http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
   This is a Sass partial
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

/*--------------------------------------------------------------
Mixins
--------------------------------------------------------------*/
/*--------------------------------------------------------------
Functions
--------------------------------------------------------------*/
.roboto--italic {
  font-style: italic; }

.roboto--medium {
  font-weight: 500; }

html, body {
  width: 100%;
  height: 100%;
  position: relative;
  font-family: 'Roboto', Helvetica, sans-serif;
  color: #9B9B9B; }

* {
  box-sizing: border-box; }

body {
  background: #F4F4F4; }

.container {
  max-width: 1280px;
  width: 90%;
  margin: auto; }

.header {
  background: #FFFFFF;
  border-bottom: 1px solid #DDDDDD; }
  .header__container {
    display: -webkit-box;
    display: -moz-box;
    display: box;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
    box-pack: justify;
    -moz-justify-content: space-between;
    -ms-justify-content: space-between;
    -o-justify-content: space-between;
    justify-content: space-between;
    -ms-flex-pack: justify;
    box-align: center;
    -moz-align-items: center;
    -ms-align-items: center;
    -o-align-items: center;
    align-items: center;
    -ms-flex-align: center;
    padding: 18px 0; }

.menu__item {
  display: inline-block;
  margin-right: 1.625rem; }
  .menu__item:last-child {
    margin-right: 0; }
  .menu__item--highlighted {
    padding: 10px;
    color: #FFFFFF;
    background: #E41370; }

.menu__item a {
  text-decoration: none;
  color: inherit; }
  .menu__item a span, .menu__item a svg {
    display: inline-block;
    vertical-align: middle; }
  .menu__item a > svg {
    margin-right: 0.25rem; }

.icon-download {
  width: 14px;
  height: 14px; }

.icon-link {
  width: 19px;
  height: 12px; }

.icon-login {
  width: 13px;
  height: 10px; }

.icon-donate {
  width: 14px;
  height: 10px; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
